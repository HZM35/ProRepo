package de.adesso.simulationselfdrivingvehicle.services;

import de.adesso.simulationselfdrivingvehicle.controller.StageRestController;
import de.adesso.simulationselfdrivingvehicle.dto.RouteDTO;
import de.adesso.simulationselfdrivingvehicle.dto.RouteSectionDTO;
import de.adesso.simulationselfdrivingvehicle.enums.RouteSectionType;
import de.adesso.simulationselfdrivingvehicle.mapper.RouteMapper;
import de.adesso.simulationselfdrivingvehicle.entities.*;
import de.adesso.simulationselfdrivingvehicle.error.RouteNotFoundException;
import de.adesso.simulationselfdrivingvehicle.repositories.*;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import javax.validation.Valid;
import java.time.LocalDateTime;
import java.util.*;


/**
 * The layer between  RouteController and the database
 */
@Service
@RequiredArgsConstructor
public class RouteService {

    private final RouteRepository routeRepository;

    private final CurveRepository curveRepository;
    private final StraightRouteRepository straightRouteRepository;

    private final SequenceGeneratorService sequenceGeneratorService;

    private final RouteMapper routeMapper;

    // the Route that will be saved contains Curve
    private boolean routeContainsCurven;


    /**
     * returns all routes
     *
     * @return a list containing all routes
     */
    public List<RouteDTO> findAll() {

        return
                routeMapper.ROUTE_DTOS(
                        routeRepository.findAll());
    }


    /**
     * Returns the Route you are looking for
     *
     * @param routeId the ID of the searched route
     * @return the route you are looking for
     */
    public RouteDTO findById(long routeId) {


        Optional<Route> route = routeRepository.findById(routeId);

        if (route.isEmpty()) {
            throw new RouteNotFoundException("The Route with id: " + routeId + " not found!");
        }
        return routeMapper.toDto(route.get());
    }


    /**
     * Saves a route.
     *
     * @param p_route an object of type RouteDTO
     * @return the Route you saved
     */
    public RouteDTO save(@Valid RouteDTO p_route) {
        Route route = new Route();

        route.setStartPoint(p_route.getStartPoint());
        route.setEndPoint(p_route.getEndPoint());

        saveAllRouteSectionsFromTheRouteSectionsList(p_route, route);

        route.setSumLength(p_route.getSumLength());

        // set the Details of the Route for FE Table.
        if (routeContainsCurven) {
            route.setDetails("Die Strecke besteht aus geraden Streckenabschnitten und Kurven");

        } else {
            route.setDetails("Die Strecke besteht aus nur geraden Streckenabschnitten");

        }
        setCreatedTimeNow(route);

        //auto generated Id
        setAutoGeneratedId(route);

        // for the Protocol
        StageRestController.routeID = route.getId();

        Route r = routeRepository.save(route);
        routeContainsCurven = false;
        return routeMapper.toDto(r);
    }


    /**
     * updates a Route by id.
     * if the new route contains empty attributes, they will not be null, but they will keep the old value
     *
     * @param id      the ID of the searched route
     * @param p_route the route containing new data
     * @return the Route you updated
     */
    public RouteDTO update(long id, RouteDTO p_route) {

        Route existingRoute = verifyRoute(id);
        existingRoute.setStartPoint(p_route.getStartPoint());
        existingRoute.setEndPoint(p_route.getEndPoint());

        // the current route section will be deleted and replaced with the new list of route sections
        for (RouteSection routeSection : existingRoute.getRouteSections()) {
            if (routeSection.getType().equals(RouteSectionType.Curve)) {
                curveRepository.deleteById(routeSection.getId());
            } else {
                straightRouteRepository.deleteById(routeSection.getId());
            }
        }
        existingRoute.setRouteSections(new ArrayList<>());
        saveAllRouteSectionsFromTheRouteSectionsList(p_route, existingRoute);
        existingRoute.setUpdatedTime(LocalDateTime.now());

        routeRepository.save(existingRoute);
        return p_route;
    }

    /**
     * in this Method will be :
     * 1 check the Typ of every RouteSection
     * 2 set (copy) the RouteSectionsList from p_routeDTO into the RouteSectionsList of  p_route
     * 3 save every RouteSection in The List
     *
     * @param p_routeDTO RouteDTO
     * @param p_route    Route will be saved
     */

    private void saveAllRouteSectionsFromTheRouteSectionsList(RouteDTO p_routeDTO, Route p_route) {
        // iterate the list of route sections dto.
        for (RouteSectionDTO routeSectionDto : p_routeDTO.getRouteSections()) {

            if (routeSectionDto.getType() == null)
                throw new IllegalArgumentException("route section type must be given");
            // RouteSections is Curve !
            if (routeSectionDto.getType().equals(RouteSectionType.Curve)) {
                Curve curve = new Curve();
                setRouteSectionValues(curve, routeSectionDto);
                // set Control Point of The Curve
                curve.setControlPointLeft(routeSectionDto.getControlPointLeft());
                curve.setControlPointRight(routeSectionDto.getControlPointRight());

                routeContainsCurven = true;
                curveRepository.save(curve);
                p_route.setRouteSection(curve);
            } else {

                StraightRoute straightRoute = new StraightRoute();
                setRouteSectionValues(straightRoute, routeSectionDto);
                straightRouteRepository.save(straightRoute);
                p_route.setRouteSection(straightRoute);
            }
        }
    }

    /**
     * in this Method will be :
     * set (copy) the Values from p_routeSection into p_RouteSectionDTO
     *
     * @param p_routeSection    RouteSection  will be saved
     * @param p_RouteSectionDTO RouteSectionDTO
     */

    private void setRouteSectionValues(RouteSection p_routeSection, RouteSectionDTO p_RouteSectionDTO) {

        // Curve or Straight
        p_routeSection.setType(p_RouteSectionDTO.getType());
        p_routeSection.setDirectionOfTraffic(p_RouteSectionDTO.getDirectionOfTraffic());

        // Left Start und End Point
        p_routeSection.setStartPointLeft(p_RouteSectionDTO.getStartPointLeft());
        p_routeSection.setEndPointLeft(p_RouteSectionDTO.getEndPointLeft());

        // Right Start und End Point
        p_routeSection.setStartPointRight(p_RouteSectionDTO.getStartPointRight());
        p_routeSection.setEndPointRight(p_RouteSectionDTO.getEndPointRight());


        p_routeSection.setCreatedTime(LocalDateTime.now());
        p_routeSection.setId(sequenceGeneratorService.generateSequence());

    }

    /**
     * deletes a route by id.
     *
     * @param id ID of Route
     * @return Message that the Route successfully deleted
     */
    public String remove(long id) {
        Route existingRoute = verifyRoute(id);
        routeRepository.delete(existingRoute);
        return "Route was successfully deleted";
    }

    /**
     * deletes all Routes.
     *
     * @return Message that all Routes successfully deleted
     */
    public String removeAll() {
        routeRepository.deleteAll();
        return "Routes were successfully deleted";
    }

    /**
     * set created time for objects
     *
     * @param route our Route
     */
    private void setCreatedTimeNow(Route route) {
        route.setCreatedTime(LocalDateTime.now());
    }

    /**
     * set auto generated ID for route und his fields
     *
     * @param route our Route
     */
    private void setAutoGeneratedId(Route route) {
        route.setId(sequenceGeneratorService.generateSequence());
    }

    /**
     * verifies if the route exists in the Database.
     *
     * @param p_id ID of Route
     * @return the existing Route
     */
    public Route verifyRoute(long p_id) {
        return routeRepository.findById(p_id).orElseThrow(() ->
                new RouteNotFoundException(("Route does not exist in the DB: " + p_id)));
    }


}
